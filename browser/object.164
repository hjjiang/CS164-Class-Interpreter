##
# The base class in our object hierarchy. All other classes must inherit from
# the root Object class. Has two methods:
# 
# 1) new: A constructor-like method that implements prototype-based inheritance.
# All Object instances as well as its subclasses are constructed with this
# method. See http://www.lua.org/pil/16.2.html for details.
#
# 2) super: Returns the super class of this object.
# Usage: self:super().methodCall(self)
# Note that this differs from "self:super():methodCall()" since the superclass
# method needs to be called on this object, and not the superclass itself.
def Object = {}

Object.new = lambda(self,o){
	if (o == null){
		o = {}
	}
	setmetatable(o,self)
	self.__index = self
	o
} 

Object.super = lambda(self){
	if ('__index' in self){
		def upOne = getmetatable(self)
		upOne
	} else {
		def currentMT = getmetatable(self)
		def superMT = getmetatable(currentMT)
		superMT
	}
}
